{3,
{42,0,0,0,0,1,0,0,00000000-0000-0000-0000-000000000000,1,
{1,0},0,0,1,1,1,0,1,0,
{0,0,0},
{0},1,
{21,
{-1,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,9,"ФормаКоманднаяПанель",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{0,0,1},0,1,0,0,0,3,3},0,"","",1,
{21,
{0},0,0,0,7,"Navigator",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,0,1,0,1,
{10,
{0},0,0,0,0,"NavigatorExtendedTooltip",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},0,3,3},1,"",0,0,0,0,0,0,3,3,0,0,0},"//начало текста модуля

///////////////////////////////////////////////////
//Служебные функции и процедуры
///////////////////////////////////////////////////

&НаКлиенте
// контекст фреймворка Vanessa-Behavior
Перем Ванесса;
 
&НаКлиенте
// Структура, в которой хранится состояние сценария между выполнением шагов. Очищается перед выполнением каждого сценария.
Перем Контекст Экспорт;
 
&НаКлиенте
// Структура, в которой можно хранить служебные данные между запусками сценариев. Существует, пока открыта форма Vanessa-Behavior.
Перем КонтекстСохраняемый Экспорт;

&НаКлиенте
// Функция экспортирует список шагов, которые реализованы в данной внешней обработке.
Функция ПолучитьСписокТестов(КонтекстФреймворкаBDD) Экспорт
	Ванесса = КонтекстФреймворкаBDD;
	
	ВсеТесты = Новый Массив;

	//описание параметров
	//Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,Снипет,ИмяПроцедуры,ПредставлениеТеста,Транзакция,Параметр);

	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,""ЯПодготавливаюДанныеПоЭлементуСправочникаСНаименованием(Парам01,Парам02)"",""ЯПодготавливаюДанныеПоЭлементуСправочникаСНаименованием"",""Допустим я подготавливаю данные по элементу справочника """"_ДемоНоменклатура"""" с наименованием """"Стул"""""");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,""ЯПодготавливаюДанныеПоНоменклатуре()"",""ЯПодготавливаюДанныеПоНоменклатуре"",""Допустим я подготавливаю данные по номенклатуре"");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,""ПоНоменклатуреСНаименованиемНетОстатков(Парам01)"",""ПоНоменклатуреСНаименованиемНетОстатков"",""Допустим по номенклатуре с наименованием """"Стул"""" нет остатков"");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,""ЯСоздаюДокументПродажиИУказываюТоварКоторогоНетВСистеме()"",""ЯСоздаюДокументПродажиИУказываюТоварКоторогоНетВСистеме"",""Когда я создаю документ продажи и указываю товар, которого нет в системе"");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,""ДокументНеПровелся()"",""ДокументНеПровелся"",""Тогда документ не провелся"");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,""ПоНоменклатуреСНаименованиемЕстьОстатки(Парам01)"",""ПоНоменклатуреСНаименованиемЕстьОстатки"",""Допустим по номенклатуре с наименованием """"Стул"""" есть остатки"");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,""ЯСоздаюДокументПродажиИУказываюТоварКоторыйЕстьВСистеме()"",""ЯСоздаюДокументПродажиИУказываюТоварКоторыйЕстьВСистеме"",""Когда я создаю документ продажи и указываю товар, который есть в системе"");

	Возврат ВсеТесты;
КонецФункции
	
&НаСервере
// Служебная функция.
Функция ПолучитьМакетСервер(ИмяМакета)
	ОбъектСервер = РеквизитФормыВЗначение(""Объект"");
	Возврат ОбъектСервер.ПолучитьМакет(ИмяМакета);
КонецФункции
	
&НаКлиенте
// Служебная функция для подключения библиотеки создания fixtures.
Функция ПолучитьМакетОбработки(ИмяМакета) Экспорт
	Возврат ПолучитьМакетСервер(ИмяМакета);
КонецФункции



///////////////////////////////////////////////////
//Работа со сценариями
///////////////////////////////////////////////////

&НаКлиенте
// Процедура выполняется перед началом каждого сценария
Процедура ПередНачаломСценария() Экспорт
	
КонецПроцедуры

&НаКлиенте
// Процедура выполняется перед окончанием каждого сценария
Процедура ПередОкончаниемСценария() Экспорт
	
КонецПроцедуры

///////////////////////////////////////////////////
&НаКлиенте
Функция ПолучитьПутьКФайлуОтносительноКаталогоFeatures(ИмяФайлаСРасширением)
	
	ПутьКФайлу = """";
	СостояниеVanessaBehavior = Ванесса.ПолучитьСостояниеVanessaBehavior();
	ПутьКТекущемуFeatureФайлу = СостояниеVanessaBehavior.ТекущаяФича.ПолныйПуть;
	ПутьКФайлу = Лев(ПутьКТекущемуFeatureФайлу, СтрНайти(ПутьКТекущемуFeatureФайлу, ""features"") - 1) + ИмяФайлаСРасширением;
	Возврат ПутьКФайлу;
	
КонецФункции

&НаКлиенте
Процедура ЗагрузитьFixtureИзМакета(ИмяМакета)
	
	Ванесса.ЗапретитьВыполнениеШагов();
	НачальноеИмяФайла = ПолучитьПутьКФайлуОтносительноКаталогоFeatures(""tools\Выгрузка и загрузка данных XML.epf"");
	Адрес = """";
	НачатьПомещениеФайла(
		Новый ОписаниеОповещения(""ЗагрузитьFixtureИзМакетаЗавершение"", ЭтотОбъект, ИмяМакета), 
		Адрес, 
		НачальноеИмяФайла, 
		Ложь);

КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьFixtureИзМакетаЗавершение(УдалосьПоместитьФайл, Адрес, ВыбранноеИмяФайла, ИмяМакета) Экспорт
	
	ЗагрузитьFixtureИзМакетаЗавершениеНаСервере(Адрес, ИмяМакета);
	Ванесса.ПродолжитьВыполнениеШагов();

КонецПроцедуры

&НаСервере
Процедура ЗагрузитьFixtureИзМакетаЗавершениеНаСервере(Адрес, ИмяМакета)
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла();
	ДвоичныеДанные = ПолучитьИзВременногоХранилища(Адрес);
	ДвоичныеДанные.Записать(ИмяВременногоФайла);
	
	ВнешняяОбработка = ВнешниеОбработки.Создать(ИмяВременногоФайла, Ложь);
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла();
	Текст = РеквизитФормыВЗначение(""Объект"").ПолучитьМакет(ИмяМакета).ПолучитьТекст();
	
	ВременныйДокумент = Новый ТекстовыйДокумент;
	ВременныйДокумент.УстановитьТекст(Текст);
	ВременныйДокумент.Записать(ИмяВременногоФайла, КодировкаТекста.UTF8);
	
	ВнешняяОбработка.ВыполнитьЗагрузку(ИмяВременногоФайла);

КонецПроцедуры

&НаСервере
Функция утвПолучитьЭлементСправочника(Наименование)
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
	""ВЫБРАТЬ
	|	_ДемоНоменклатура.Ссылка
	|ИЗ
	|	Справочник._ДемоНоменклатура КАК _ДемоНоменклатура
	|ГДЕ
	|	_ДемоНоменклатура.Наименование = &Наименование"";
	
	Запрос.УстановитьПараметр(""Наименование"", Наименование);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	ВыборкаДетальныеЗаписи.Следующий();
	
	Возврат ВыборкаДетальныеЗаписи.Ссылка;
	
КонецФункции

&НаСервере
Процедура УдалитьДанныеПродажиИПоступленияПоНоменклатуре(Номенклатура)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	""ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ОстаткиТоваров.Регистратор
	|ИЗ
	|	РегистрНакопления.ОстаткиТоваров КАК ОстаткиТоваров
	|ГДЕ
	|	ОстаткиТоваров.Номенклатура = &Номенклатура
	|
	|СГРУППИРОВАТЬ ПО
	|	ОстаткиТоваров.Регистратор"";
		
	Запрос.УстановитьПараметр(""Номенклатура"", Номенклатура);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда 
		Возврат;
	КонецЕсли;
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл 
		
		ЭлементОбъект = ВыборкаДетальныеЗаписи.Регистратор.ПолучитьОбъект();
		СписокТоваров = ЭлементОбъект.СписокТоваров;
		
		МассивНоменклатурыДляУдаления = СписокТоваров.НайтиСтроки(Новый Структура(""Номенклатура"", Номенклатура));
		КоличествоТовара = СписокТоваров.Количество();
				
		Если КоличествоТовара = МассивНоменклатурыДляУдаления.Количество() Тогда 
			ЭлементОбъект.Удалить();
		Иначе 
			
			Сч = 0;
			Пока Сч < СписокТоваров.Количество() Цикл 
				Если СписокТоваров[Сч].Номенклатура = Номенклатура Тогда
					СписокТоваров.Удалить(Сч);
				Иначе
					Сч = Сч + 1;
				КонецЕсли;
			КонецЦикла;

			ЭлементОбъект.Записать();
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры


///////////////////////////////////////////////////
//Реализация шагов
///////////////////////////////////////////////////

&НаКлиенте
//Допустим я подготавливаю данные по номенклатуре 
//@ЯПодготавливаюДанныеПоНоменклатуре()
Процедура ЯПодготавливаюДанныеПоНоменклатуре() Экспорт
	
	ЗагрузитьFixtureИзМакета(""Номенклатура"");
	ЗагрузитьFixtureИзМакета(""Пользователи"");
	
КонецПроцедуры   

&НаКлиенте
//Допустим по номенклатуре с наименованием ""Стул"" нет остатков
//@ПоНоменклатуреСНаименованиемНетОстатков(Парам01)
Процедура ПоНоменклатуреСНаименованиемНетОстатков(НаименованиеНоменклатуры) Экспорт
	
	Номенклатура = утвПолучитьЭлементСправочника(НаименованиеНоменклатуры);   	
	УдалитьДанныеПродажиИПоступленияПоНоменклатуре(Номенклатура);

КонецПроцедуры

&НаКлиенте
//Когда я создаю документ продажи и указываю товар, которого нет в системе
//@ЯСоздаюДокументПродажиИУказываюТоварКоторогоНетВСистеме()
Процедура ЯСоздаюДокументПродажиИУказываюТоварКоторогоНетВСистеме() Экспорт
	//Ванесса.ПосмотретьЗначение(Парам01,Истина);
	ВызватьИсключение ""Не реализовано."";
КонецПроцедуры

&НаКлиенте
//Тогда документ не провелся
//@ДокументНеПровелся()
Процедура ДокументНеПровелся() Экспорт
	//Ванесса.ПосмотретьЗначение(Парам01,Истина);
	ВызватьИсключение ""Не реализовано."";
КонецПроцедуры

&НаКлиенте
//Допустим по номенклатуре с наименованием ""Стул"" есть остатки
//@ПоНоменклатуреСНаименованиемЕстьОстатки(Парам01)
Процедура ПоНоменклатуреСНаименованиемЕстьОстатки(НаименованиеНоменклатуры) Экспорт
	
	Номенклатура = утвПолучитьЭлементСправочника(НаименованиеНоменклатуры);
	
	УдалитьДанныеПродажиИПоступленияПоНоменклатуре(Номенклатура);
	СостояниеVanessaBehavior = Ванесса.ПолучитьСостояниеVanessaBehavior();
	Если СостояниеVanessaBehavior.ТекущийСценарий.Имя = ""Продажа товара, который есть в системе"" Тогда
		ЗагрузитьFixtureИзМакета(""ПоступлениеТовара"");
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
//Когда я создаю документ продажи и указываю товар, который есть в системе
//@ЯСоздаюДокументПродажиИУказываюТоварКоторыйЕстьВСистеме()
Процедура ЯСоздаюДокументПродажиИУказываюТоварКоторыйЕстьВСистеме() Экспорт
	//Ванесса.ПосмотретьЗначение(Парам01,Истина);
	ВызватьИсключение ""Не реализовано."";
КонецПроцедуры

//окончание текста модуля",
{4,1,
{9,
{1},0,"Объект",
{1,0},
{"Pattern",
{"#",1fa267af-3d54-4f70-ac00-718486d7aafd}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},1,0,0,0,
{0,0},
{0,0}
},0,0,
{#base64:77u/PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz4NCjxTZXR0
aW5ncyB4bWxucz0iaHR0cDovL3Y4LjFjLnJ1LzguMS9kYXRhLWNvbXBvc2l0aW9u
LXN5c3RlbS9zZXR0aW5ncyIgeG1sbnM6ZGNzY29yPSJodHRwOi8vdjguMWMucnUv
OC4xL2RhdGEtY29tcG9zaXRpb24tc3lzdGVtL2NvcmUiIHhtbG5zOnN0eWxlPSJo
dHRwOi8vdjguMWMucnUvOC4xL2RhdGEvdWkvc3R5bGUiIHhtbG5zOnN5cz0iaHR0
cDovL3Y4LjFjLnJ1LzguMS9kYXRhL3VpL2ZvbnRzL3N5c3RlbSIgeG1sbnM6djg9
Imh0dHA6Ly92OC4xYy5ydS84LjEvZGF0YS9jb3JlIiB4bWxuczp2OHVpPSJodHRw
Oi8vdjguMWMucnUvOC4xL2RhdGEvdWkiIHhtbG5zOndlYj0iaHR0cDovL3Y4LjFj
LnJ1LzguMS9kYXRhL3VpL2NvbG9ycy93ZWIiIHhtbG5zOndpbj0iaHR0cDovL3Y4
LjFjLnJ1LzguMS9kYXRhL3VpL2NvbG9ycy93aW5kb3dzIiB4bWxuczp4cz0iaHR0
cDovL3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEiIHhtbG5zOnhzaT0iaHR0cDov
L3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEtaW5zdGFuY2UiLz4=}
},
{0,0},
{0,0},
{0,0},
{0,0},0,0}